一、事件
  事件流：描述的是从页面接收事件的顺序。
          （1）IE 事件冒泡流：即事件是有具体元素接收，然后逐级的向上传播。
                所有的现代浏览器都是支持事件冒泡，IE5.5或更早版本的事件冒泡会跳过<html> ,IE9+和其他浏览器一直冒泡到window。
          （2）Netscape 事件捕获流：即不太具体的结点先接受到事件，而最具体的事件最后接受到事件。IE9+等其他浏览器也都支持事件捕获。
              并且都是从window开始。
          （3）DOM事件流：包括三个阶段  事件捕获阶段   处于目标阶段    事件冒泡阶段。即是DOM2级事件规范明确的规定要求捕获阶段
              不会涉及事件目标，但是在IE9+及其他浏览器都在捕获阶段触发事件对象上的事件。
  事件处理程序：响应某个事件的函数叫做事件处理程序或事件侦听器。
          （1）HTML事件处理程序
                缺点：存在时差问题。
                      处理程序的作用域链在不同的浏览器中会导致不同的结果。
          （2）DOM0事件处理程序
                var btn = document.getElementById("myDiv");
                btn.onclick = function(event){
                    //............
                };
                以这样的方式添加的时间处理程序会在事件流的冒泡阶段被处理。
                优点：简单，具有夸浏览器的优势。
          （3）DOM2事件处理程序
              addEventListener()  removeEventListener()
              优点：可以添加多个事件处理程序，添加的处理程序按顺序执行。
          （4）IE事件处理程序
              attachEvent() deleteEvent()
              优点：可以添加多个事件处理程序，添加的处理程序按逆序执行。
              注意：DOM0级方法的情况下，事件处理程序会在所属元素的作用域内运行，在使用attachEvent()方法的情况下，事件处理程序会在
              全局作用域下执行。
          （5）跨浏览器的事件处理程序
              var EventUtil = {
                addHandler:function(element,type,handler){
                  if(element.addEventListener){
                    element.addEventListener(type,handler,false);
                  }
                  else if(element.attachEvent){
                    element.attachEvent("on"+type,handler);
                  }
                  else{
                    element["on"+type]=handler;
                  }
                },
                removeHandler:function(element,type,handler){
                  if(element.removeEventListener){
                    element.removeEventListener(type,handler,false);
                  }
                  else if(element.deleteEvent){
                    element.deleteEvent("on"+type,handler);
                  }
                  else{
                    element["on"+type]=null;
                  }
                }
              }; 
  事件对象：在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有的与事件有关的信息。
            （1）DOM中的事件对象： bubbles 是否冒泡
                                   cancelable 是否可以取消事件的默认行为
                                   currentTarget 处理程序当前正在处理事件的那个元素。
                                   eventPhase  调用事件处于那个阶段：1表示捕获阶段 2表示处理目标 3表示冒泡阶段
                                   stopPropagation() 取消事件的进一步捕获或冒泡 当bubbles为true的时候使用
                                   preventDefault() 取消事件的默认行为，当cancelable为true的时候使用
                                   target 事件的目标
                                   type  触发事件的类型
            （2）IE中的事件对象：cancelBulle 取消事件冒泡
                                 returnValue 取消事件的默认行为
                                 srcElement 事件的目标
                                 type    触发事件的类型
            （3）跨浏览器的事件对象：
                var EventUtil = {
                  addHandler：function(element,type,handler){
                    //...........
                  },
                  removeHandler:function(element,type,handler){
                    //............
                  },
                  getEvent:function(event){
                    return event?event:event:window;
                  },
                  getTarget:function(event){
                    return event.target||event.scrElement;
                  },
                  preventDefault:function(event){
                    if(event.preventDefault){
                      event.preventDefault();
                    }
                    else{
                      event.returnValue=false;
                    }
                  },
                  stopPropagation:function(event){
                    if(event.stopPropagation){
                      event.stopPropagation();
                    }
                    else{
                      event.cancelBubble=true;
                    }
                  }
                }；
  
  事件类型：UI事件、焦点事件、鼠标事件、滚轮事件、文本事件、键盘事件、合成事件、变动事件、变动名称事件
            UI事件：load unload abort error select resize scroll 指那些不一定与用户操作有关的事件。
            焦点事件：在页面元素获取或失去焦点时触发。blur focus（不冒泡）
            鼠标与滚轮事件：click dbclick  mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup 
              在页面没有滚动的情况下 clientX clientY 和pageX pageY 的值是一样的。screenX screenY
              修改键：shiftKey ctrlKey altKey metaKey
              鼠标按钮：DOM的button属性可能有三个值，0表示主鼠标按钮 1表示中间鼠标按钮 2表示次鼠标按钮
                        IE8几之前的鼠标按钮button属性 0 1 2 3 4 5 6 7
                var EventUtil={
                  //..........上诉的很多代码
                  getButton:function(event){
                    if(document.implementation.hasFeature("MouseEvents","2.0")){
                      return event.button;
                    }
                    else{
                      switch(event.button){
                        case 0:
                        case 1:
                        case 3:
                        case 5:
                        case 7:
                          return 0;
                        case 2:
                        case 6:
                          return 2;
                        case 4:
                          return 1; 
                      }
                    }
                  }
                  
                };        
                  鼠标滚轮事件 mousewheel()（IE6.0+ oprera chrome safari）
                            鼠标向前是wheelDelta是+120的倍数  
                            鼠标向后是wheelDelta是-120的倍数
                            
                            FF也有一个类似的事件DOMMouseScroll()
                            鼠标向前是detail是+3的倍数
                            鼠标向后是detail是-3的倍数
         
            键盘和文本事件：是那个键盘事件 keydown keypress keyup
                            触发顺序：keydown keypress keyup ；keydown和keypress是在文本框发生变化之前触发的，keyup的变化之后触发。
                            文本事件：textinput在文本插入之前触发，当触发这个事件的时候，event还有一个inputMethod属性表示文本输入的方式（0-9）。
                            keycode是所有的浏览器都支持，但是charcode是在keypress事件触发才包含的值，并且opera不支持。
                            
            合成事件：用于处理IME（输入法编辑器）输入序列，同时按住多个建，但是最终只会输入一个字符。
                      三种复合事件：compositionstart()
                                    compositionupdata()
                                    compositionupdata()
              
              
            变动事件：DOM中的某一部分发生变化的时候给出的提示。（IE9.0+）
            HTML事件：1、contextmenu事件：通过单击鼠标右键可以调出上下文菜单（冒泡）。
                      2、beforeunload事件：在页面卸载之前阻止这一行为。
                      3、DOMContentLoaded事件：形成完整的DOM树之后触发。
                      4、readstatechange事件：提供与文件和元素的加载状况有关的信息。
                      5、pageshow和pagehide事件：在重新加载页面中，pageshow会在load触发之后触发
                      6、hashchange事件：在URL的参数列表发生改变的时候触发。
            设备事件
            触摸和手势事件
            
            
      
  事件导致的性能问题：事件处理程序过多：首先每个函数都是一个对象，都会占用内存，内存的对象越多导致性能越差。
                                        其次必须事先指定所有的事件处理程序导致DOM访问次数，会延迟整个页面的交互就绪时间。
                      解决方案：事件委托-事件委托是利用事件冒泡。只需要指定一个事件处理程序就可以管理一类事件。
                                移除事件处理程序。
                      
                      事件委托：  
                      例如：以前
                        <ul id="myLinks">
                          <li id="goSomewhere">Go somewhere</li>
                          <li id="doSomething">Go something</li>
                          <li id="sayHi">Say hi</li>
                        </ul>
                        
                        var item1 =document.getElementById("goSomewhere");
                        EventUtil.addHandler(item1,"click",function(){
                        
                        });
                        //需要定义三个
                      
                           现在使用事件委托，只需要写一个就可以了；
                          var list =document.getElementById("myLinks");
                          EventUtil.addHandler(list,"click",function(event){
                            event=EventUtil.getEvent(event);
                            var target = EventUtil.getTarget(event);
                            switch(target.id){
                              case "doSomething": ;break;
                              .....
                            }
                          });
      模拟事件。。。。。。。。。。。。。。。。。。。
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
              
              
            
