1、你对WEB标准和w3c的理解认识？
  标签闭合，标签小写，不乱嵌套，提高搜索引擎的搜索几率，使用外联的js和css，结构和表现分离，页面的加载与文件的下载速度更快，
  内容能被更多的用户访问，内容内被更广泛的设置访问，更少的代码和组件，已维护，改版方便，不需要改变页面内容、提供打印版本而不需要
  复制内容，提高网站易用性。

2、xhtml和html的区别？
  HTML是一种基于web网页设计的语言，xml是一种基于xml的置表语言。
  xml必须被正确嵌套，必须被关闭，必须小写，xml文档必须由根元素。

3、Doctype？严格模式和混合模式如何触发这两种模式？区分他们的意义。
  
4、行内元素，块元素，css盒子模型。
    块级元素：div p h1 h2 h3 h4 form ul dl dt dd  li ol
　　行内元素: a b br i span input select 
　　Css盒模型:内容，border ,margin，padding
5、css的引入方式有哪些？link和@import的区别
  1、行内，内嵌，外联，导入
  2、link和@import的区别：link加载的css样式是在页面加载之前，而@import加载的样式是在页面加载知乎
                          import是在IE5之后才能应用，link是html标签不存在兼容性问题
                          link是HTML提供的标签，而import是css提供的
                          link的权重高于import
6、CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?
选择器：通配符选择器、标签选择器、组合选择器、ID选择器、类选择器、属性选择器 后代选择器 兄弟选择器 之类选择器 伪类/伪元素选择器
优先级（特殊性）：类选择器、伪类选择器、属性选择器：0,0,1,0
                  ID选择器：0,1,0,0
                  结合符和通配符选择器：0,0,0,0
                  内联样式：1,0,0,0,
内联的优先级<important

7.前端页面有哪三层构成，分别是什么?作用是什么?
结构层：html 对页面内容的语言结构做出了描述 
表现层：css  css对如何显示有关内容做出了回答。
行为层：js  js作用是如何对事件做出反应。

8.css的基本语句构成是?
选择器+声明块（名称+属性）

9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?
IE(Trident) FF(Gecko) opera(Presto) saferi(Webkit) chrome(Webkit,opera)

10.写出几种IE6 BUG的解决方法？
      1、IE6怪异解析之padding与border算入宽高
      原因：未加文档声明造成非盒模型解析
      解决方法：加入文档声明<!doctype html>
      
      2、IE6在块元素、左右浮动、设定margin时造成margin双倍（双边距）
      解决方法：display:inline
      
      3、以下三种其实是同一种bug，其实也不算是个bug，举个例子：父标签高度20，子标签11，垂直居中，20-11=9，9要分给文字的
      上面与下面，怎么分？IE6就会与其它的不同，所以，尽量避免。
      1）字体大小为奇数之边框高度少1px
      解决方法：字体大小设置为偶数或line-height为偶数
      2）line-height，文本垂直居中差1px
      解决方法：padding-top代替line-height居中，或line-height加1或减1
      3）与父标签的宽度的奇偶不同的居中造成1px的偏离
      解决方法：如果父标签是奇数宽度，则子标签也用奇数宽度;如果是父标签偶数宽度，则子标签也用偶数宽度
      
      4、内部盒模型超出父级时，父级被撑大
      解决方法：父标签使用overflow:hidden
      
      5、line-height默认行高bug
      解决方法：line-height设值
      
      6、行标签之间会有一小段空白
      解决方法：float或结构并排(可读性差，不建议)
      
      7、标签高度无法小于19px
      解决方法：overflow: hidden;
      
      8、左浮元素margin-bottom失效
      解决方法：显示设置高度 or 父标签设置_padding-bottom代替子标签的margin-bottom or 再放个标签让父标签浮动，子标签
      margin- bottom，即(margin-bottom与float不同时作用于一个标签)
      
      9、img于块元素中，底边多出空白
      解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;
      
      10、li之间会有间距
      解决方法：float: left;
      
      11、块元素中有文字及右浮动的行元素，行元素换行
      解决方法：将行元素置于块元素内的文字前
      
      12、position下的left，bottom错位
      解决方法：为父级(relative层)设置宽高或添加*zoom:1
      
      13、子级中有设置position，则父级overflow失效
      解决方法：为父级设置position:relative
      
      1.双边距BUG float引起的 使用display
  　　2.3像素问题 使用float引起的 使用dislpay:inline -3px
  　　3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active
  　　4.Ie z-index问题 给父级添加position:relative
  　　5.Png 透明 使用js代码 改
  　　6.Min-height 最小高度 !Important 解决’
  　　7.select 在ie6下遮盖 使用iframe嵌套
  　　8.为什么没有办法定义1px左右的宽度容器(IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px)
  　　9.ie 6 不支持!important
      以下是补充：上面要先看
      
      1、终极方法：条件注释
      <!--[if lte IE 6]> 这段文字仅显示在 IE6及IE6以下版本。 <![endif]-->
      <!--[if gte IE 6]> 这段文字仅显示在 IE6及IE6以上版本。 <![endif]-->
      <!--[if gt IE 6]> 这段文字仅显示在 IE6以上版本（不包含IE6）。 <![endif]-->
      <!--[if IE 5.5]> 这段文字仅显示在 IE5.5。 <![endif]-->
      <!--在 IE6及IE6以下版本中加载css-->
      <!--[if lte IE 6]> <link type="text/css" rel="stylesheet" href="css/ie6.css" mce_href="css/ie6.css" /><![endif]-->
      缺点是在IE浏览器下可能会增加额外的HTTP请求数。
      
      2、CSS选择器区分
      IE6不支持子选择器；先针对IE6使用常规申明CSS选择器，然后再用子选择器针对IE7+及其他浏览器。
      
      复制代码
      代码如下:
      
      /* IE6 专用 */
      .content {color:red;}
      /* 其他浏览器 */
      div>p .content {color:blue;} -->
      
      3、PNG半透明图片的问题
      虽然可以通过JS等方式解决，但依然存在载入速度等问题，所以，这个在设计上能避免还是尽量避免为好。以达到网站最大优化。
      4、IE6下的圆角
      IE6不支持CSS3的圆角属性，性价比最高的解决方法就是用图片圆角来替代，或者放弃IE6的圆角。
      
      5、IE6背景闪烁
      如果你给链接、按钮用CSS sprites作为背景，你可能会发现在IE6下会有背景图闪烁的现象。造成这个的原因是由于IE6没有将背景图缓存，每次触发hover的时候都会重新加载，可以用JavaScript设置IE6缓存这些图片：
      
      复制代码
      代码如下:
      
      document.execCommand("BackgroundImageCache",false,true);
      
      6、最小高度
      IE6 不支持min-height属性，但它却认为height就是最小高度。解决方法：使用ie6不支持但其余浏览器支持的属性!important。
      
      复制代码
      代码如下:
      
      #container {min-height:200px; height:auto !important; height:200px;}
      
      7、最大高度
      
      复制代码
      代码如下:
      
      //直接使用ID来改变元素的最大高度
      var container = document.getElementById('container');
      container.style.height = (container.scrollHeight > 199) ? "200px" : "auto";
      //写成函数来运行
      function setMaxHeight(elementId, height){
      var container = document.getElementById(elementId);
      container.style.height = (container.scrollHeight > (height - 1)) ? height + "px" : "auto";
      }
      //函数示例
      setMaxHeight('container1', 200);
      setMaxHeight('container2', 500);
      
      8、100% 高度
      在IE6下，如果要给元素定义100%高度，必须要明确定义它的父级元素的高度，如果你需要给元素定义满屏的高度，就得先给html和body定义height:100%;。
      
      9、最小宽度
      同max-height和max-width一样，IE6也不支持min-width。
      
      复制代码
      代码如下:
      
      //直接使用ID来改变元素的最小宽度
      var container = document.getElementById('container');
      container.style.width = (container.clientWidth < width) ? "500px" : "auto";
      //写成函数来运行
      function setMinWidth(elementId, width){
      var container = document.getElementById(elementId);
      container.style.width = (container.clientWidth < width) ? width + "px" : "auto";
      }
      //函数示例
      setMinWidth('container1', 200);
      setMinWidth('container2', 500);
      
      10、最大宽度
      
      复制代码
      代码如下:
      
      //直接使用ID来改变元素的最大宽度
      var container = document.getElementById(elementId);
      container.style.width = (container.clientWidth > (width - 1)) ? width + "px" : "auto";
      //写成函数来运行
      function setMaxWidth(elementId, width){
      var container = document.getElementById(elementId);
      container.style.width = (container.clientWidth > (width - 1)) ? width + "px" : "auto";
      }
      //函数示例
      setMaxWidth('container1', 200);
      setMaxWidth('container2', 500);
      
      11、双边距Bug
      当元素浮动时，IE6会错误的把浮动方向的margin值双倍计算。个人觉得较好解决方法是避免float和margin同时使用。
      
      12、清除浮动
      如果你想用div(或其他容器)包裹一个浮动的元素，你会发现必须给div(容器)定义明确的height、width、overflow之中一个属性（除了auto值）才能将浮动元素严实地包裹。
      
      复制代码
      代码如下:
      
      #container {border:1px solid #333; overflow:auto; height:100%;}
      #floated1 {float:left; height:300px; width:200px; background:#00F;}
      #floated2 {float:right; height:400px; width:200px; background:#F0F;}
      更多：http://www.twinsenliang.net/skill/20090413.html
      
      13、浮动层错位
      当内容超出外包容器定义的宽度时，在IE6中容器会忽视定义的width值，宽度会错误地随内容宽度增长而增长。
      浮动层错位问题在IE6下没有真正让人满意的解决方法，虽然可以使用overflow:hidden;或overflow:scroll;来修正， 但hidden容易导致其他一些问题，scroll会破坏设计；JavaScript也没法很好地解决这个问题。所以建议是一定要在布局上避免这个问题发 生，使用一个固定的布局或者控制好内容的宽度（给内层加width）。
      
      14、躲猫猫bug
      在IE6和IE7下，躲猫猫bug是一个非常恼人的问题。一个撑破了容器的浮动元素，如果在他之后有不浮动的内容，并且有一些定义了:hover的链接，当鼠标移到那些链接上时，在IE6下就会触发躲猫猫。
      解决方法很简单：
      1.在（那个未浮动的）内容之后添加一个<span style="clear: both;"> </span>
      2.触发包含了这些链接的容器的hasLayout，一个简单的方法就是给其定义height:1%;
      
      15、绝对定位元素的1像素间距bug
      IE6下的这个错误是由于进位处理误差造成（IE7已修复），当绝对定位元素的父元素高或宽为奇数时，bottom和right会产生错误。唯一的解决办法就是给父元素定义明确的高宽值，但对于液态布局没有完美的解决方法。
      
      16、3像素间距bug
      在IE6中，当文本(或无浮动元素)跟在一个浮动的元素之后，文本和这个浮动元素之间会多出3像素的间隔。
      给浮动层添加 display:inline 和 -3px 负值margin
      给中间的内容层定义 margin-right 以纠正-3px
      
      17、IE下z-index的bug
      在IE浏览器中，定位元素的z-index层级是相对于各自的父级容器，所以会导致z-index出现错误的表现。解决方法是给其父级元素定义z-index，有些情况下还需要定义position:relative。
      
      18、Overflow Bug
      在IE6/7中，overflow无法正确的隐藏有相对定位position:relative;的子元素。解决方法就是给外包容器.wrap加上position:relative;。
      
      19、横向列表宽度bug
      如果你使用float:left;把<li>横向摆列，并且<li>内包含的<a>（或其他）触发了 hasLayout，在IE6下就会有错误的表现。解决方法很简单，只需要给<a>定义同样的float:left;即可。
      
      20、列表阶梯bug
      列表阶梯bug通常会在给<li>的子元素<a>使用float:left;时触发，我们本意是要做一个横向的列表(通常 是导航栏)，但IE却可能呈现出垂直的或者阶梯状。解决办法就是给<li>定义float:left;而非子元素<a>，或者 给<li>定义display:inline;也可以解决。
      
      21、垂直列表间隙bug
      当我们使用<li> 包含一个块级子元素时，IE6(IE7也有可能)会错误地给每条列表元素（<li>）之间添加空隙。
      解决方法：把<a>flaot并且清除float来解决这个问题；另外一个办法就是触发<a>的hasLayout（如定 义高宽、使用zoom:1;）；也可以给<li> 定义display:inline;来解决此问题；另外还有一个极有趣的方法，给包含的文本末尾添加一个空格。
      
      22、IE6中的:hover
      在IE6中，除了(需要有href属性)才能触发:hover行为，这妨碍了我们实现许多鼠标触碰效果，但还是有一些法子是可以解决它的。最好是不要用:hover来实现重要的功能，仅仅只用它来强化效果。
      
      23、IE6调整窗口大小的 Bug
      当把body居中放置，改变IE浏览器大小的时候，任何在body里面的相对定位元素都会固定不动了。解决办法：给body定义position:relative;就行了。
      
      24、文本重复Bug
      在IE6中，一些隐藏的元素（如注释、display:none;的元素）被包含在一个浮动元素里，就有可能引发文本重复bug。解决办法：给浮动元素添加display:inline;。 
      
      
11.img标签上title与alt属性的区别是什么?
　　Alt 当图片不显示时 用文字代表。
　　Title 为该属性提供信息
12.描述css reset的作用和用途。
　　Reset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一
13.解释css sprites，如何使用。
　　Css 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量
14.浏览器标准模式和怪异模式之间的区别是什么?
　　盒子模型 渲染模式的不同
　　所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式
　　不一样，所以我们称之为怪异模式。浏览器解析时到底使用标准模式还是怪异模式，与你网页中的DTD声明直接相关，DTD声明定义了标准
　　文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略DTD声明,将使网页进入怪异模式(quirks mode)。
　　使用 window.top.document.compatMode 可显示为什么模式
15.你如何对网站的文件和资源进行优化?期待的解决方案包括：
　　文件合并
　　文件最小化/文件压缩
　　使用CDN托管
　　缓存的使用
16.什么是语义化的HTML?
　　直观的认识标签 对于搜索引擎的抓取有好处
17.清除浮动的几种方式，各自的优缺点
　　1.使用空标签清除浮动 clear:both(理论上能清楚任何标签，，，增加无意义的标签)
　　2.使用overflow:auto(空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE)
　　3.是用afert伪元素清除浮动(用于非IE浏览器)
18.css hack
　　<!--[if IE 6]--><![end if]-->
　　_marging \\IE 6
　　+margin \\IE 7
　　Marging:0 auto \9 所有Ie
　　Margin \0 \\IE 8












