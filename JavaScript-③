一、JavaScript的深拷贝和浅拷贝。
有时候我们在使用数组或者对象进行操作的时候，需要将数组或者对象进行备份，但是，有时候当我们简单的将一个数组或者对象复制给其他变量，
那么我们只要改变其中一个，另外一个也会随之改变，这样的复制拷贝，叫做浅拷贝。

数组的深拷贝：
1、JavaScript的slice()方法。
2、JavaScript的concat()方法。
3、循环复制。

对象的深拷贝：
1、对象的深拷贝就是把对象的所有属性全部遍历一遍，复制给新对象。

数值和对象深拷贝的公共方法：
function clone(obj){
  var buf;
  if(obj instanceof Array){
    buf=[];
    buf = obj.concat();//buf = obj.slice(0);
    return buf;
  }
  else if(obj instanceof Object){
    var buf={};
    for(var ob in obj){
      buf[ob]=obj[ob];
    }
    return buf;
  }
  else{
    return obj;
  }
}

二、Dom学习

1、什么是Dom？
Dom是W3c的标准，是定义HTML和XML的标准。W3C的文档对象模型是中立与语言和平台的接口，他允许程序和脚本
动态的访问和改变文档的内容样式和结构。分为三部分：核心DOM，HTML DOM , XML DOM.


2、HTML DOM结点。
在HTML中所有的事务都是结点，DOM被视为是节点树的HTML。

注意在IE中所有的DOM对象都是以COM（组件对象模型）对象形式出现的，这意味着IE中的DOM对象和JavaScript对象的行为特点不是一致的。

（1）Node类型
Node.ELEMENT_NODE        (1)
Node.ATTRIBUTE_NODE      (2)
Node.TEXT_NODE           (3)
Node.CDATA_SECATION_NODE (4)
Node_ENTITY_REFERENCE_NODE(5)
Node_ENTITY_NODE         (6)
Node_POROCESSING_INSTRUCTION_NODE (7)
Node_COMMENT_NODE        (8)
Node_DOCUMENT_NODE       (9)
Node_DOCUMENT_TYPE_NODE  (10)
Node_DOCUMENT_FRAGMENT_NODE (11)
Node_NOTATION_NODE       (12)
注意在IE中没有公布node的构造函数，所有在IE中不能使用上诉的12中类型，但是可以使用数字。

节点关系：
childeNodes     parentNode    perivousSibling       lastSibling
firstNode       lastNode      hasNodeChildes()      owerDocument（该属性指向表示整个文档的文档结点）

操作结点：
appendChild():用于向childNodes列表末尾添加一个结点；
var node = document.createElement("div");
var text = document.createTextNode("this is div");
node.appendChild(text);
var element =  document.getElementById("div");
element.appendChild(node);

insertBefore(newNode , oldNode);

replaceChild(newNode , oldNode);

removeChild(node);注意被替换和删除的结点依然还在文档当中，只是在文档中没有这些结点的位置。

cloneNode();当设置cloneNode(true)表示深复制，复制的是整个子节点树，在设置为false的时候表示是浅复制，只复制结点本身。

normalize();这个方法是清除没有文本的结点和重复结点。splitText（number）分割文本节点。



（2）Document类型：是HTMLDocument的实例，在所有浏览都可以访问当HTMLDocument的构造函数。但是在IE总不可以访问document类型的
构造函数。
nodeType的值为9  nodeName的值为"#document"   nodeValue的值为null
parentNode的值为null       owerDocument的值为null

文档的子节点：
var html = document.documentElement; 对文档的<html>的引用
var body = document.body;            对文档的<body>的引用
var doctype = document.doctype;      对文档的<!DOCTYPE>的引用
var title = document.title;          可以设置获取文档的标题
var URL = document.URL;              对文档的URL的获取；
var domain = document.domain;        对文档的域名获取和设置；当域名开始是松散的，那么久不能将他设置为紧绷的。
var referrer = document.refferrer;   取得来源页面的URL;

查找元素：
document.getElementById(ID);在IE8及较低的版本都是不区分ID的大小写的。在IE7及较低的版本中调用document.getElementById(ID),
表单的name和ID相同也会被返回。
document.getElementsByTagName(TAG);返回值可以使用三个方法访问[] item() namedItem(name属性)返回的是一个数组
docuemnt.getElementsByTagName("*");返回文档的全部元素
document.getElementsByName();HTMLDcoument提供
document.anchors; 返回文档的<a>
document.applets;
document.forms;
document.images;
document.links;
document.implementation.hasFeatrue(检查DOM的名称，版本);DOM一致性的检查。
write() writeln() open() close()   open() close()分别是打开和关闭页面的输出流

（3） ELemnt(元素)类型
nodeType的值为1 nodeName的值是元素的标签名（要访问元素的标签名，可以是nodeName也可以是tagName）
nodeVluae的值为null parentNode可能是Document或Element

在HTML中标签名始终是以大写形式存在，在xml中标签名是和源代码一直。

可以在任何浏览器通过脚本访问Element类型的构造函数及原型。

取得属性：getAttribute setAttribute removeAttribute(完全的删除)
并且这种方式还可以获取自定义属性，在HTML中设置自定义属性应该加上daya-前缀。

注意在通过属性访问和通过getAttribute()访问特性的时候，表现有时候是不一样的，例如：style通过属性访问是返回一个对象，
通过getAttrbute是返回一个css文本，在比如onlick这样的浏览器事件通过属访问是返回一个javaScript函数，但是通过getAttribute
访问是放回代码的字符串。（在IE7之前放回是一样的）

由于这些差别，在操作DOM的时候一般不适用getAttribute而是使用属性，只有在获取自定义属性的时候才使用getAttribute

attributes属性：Element是唯一一个使用attibutes的DOM节点类型。
这个属性包含一个“动态集合” 这个集合拥有很多的方法：getNamedItem（name）返回nodeName属性等于name的节点。
                                                     removeNamedItem（name）从列表中移除nodeName等于name的节点
                                                     setNamedItem（name）添加节点，以节点的nodeName属性为引所。
                                                     item（pos）返回位于数据pos位置处的节点。

创建元素：document.createElement("div")可以创建元素，但是为更好的兼容IE7或更早的版本的某些问题①，可以使用
document，crateElement("<div id=\"myNewDiv\" class=\"box\"></div>")这样的形式来兼容。
注释①：不能动态的设置iframe元素的name特征。
        不能通过reset方法重置input
        type为reset的butoon不能重置表单
        动态创建的一批nanm相同的单选按钮之间彼此没有关系。


(4)Text类型
  nodeType的值为3  nodeName的值为"#text"
  nodeValue为节点包含的文本（可以通过nodeVlue属性或者是data属性访问text节点中的文本）  parentNode是一个Element。
  操作节点的文本：appendData（text）将text添加到节点的末尾
                  deleteData（offset，count）从offset指定位置开始删除count个字符。
                  insertData（offset，text）从pffset指定位置开始插入text
                  replaceData（offset，count，text）
                  splitText（offset）从offset指定位置将当前的文本节点分为两个文本节点。
                  substringData（offset，count）提取offset+count个字符。

（5）Comment类型
nodeType的值为8   nodeName的值为"#comment"
nodeVlue的值是注释的内容（nodeVlue data）   parentNode可能是Document或Element

document.createComment("A Comment") 创建注释

（6）Attr类型
nodeType的值为2  nodeName的值是特性的名称
nodeValue的值为特性的值  parentNode的值为null
三个属性：name value specifed（布尔值，表示是在代码中指定的还是默认的）。

**************************
动态脚本加载：指页面加载不存在的脚本。
function loadScript（url）{
  var script = document.createElement("script");
  script.type="text/javascript";
  script.src="client.js";
  document.body.appendChild("script");
}
但是这种方式我们并不知道脚本是否加载完成。并且IE将<script>视为一种特殊的元素，不允许访问他的子节点，
但是可以使用<script>的text属性来指定javaScript代码。
修改后的方式：
function loadScript（code）{
  var script = document.createElement("script");
  script.type="text/javascript";
  try{
    script.appendChild(document.createTextNode(code));
  }catch(ex){
      script.text=code;
  }
  document.body.appendChild(script);
}
动态样式：指页面加载时不存在的样式。
function loadScript（url）{
  var link =document.createElement("link");
  link.real="stylesheet";
  link.type="text/css";
  link.href="style.css";
  var head = dovument.getElementsByTagName("head")[0];
  head.appendChild(link);
}
与动态的添加脚本一样上面的方式是存在一定的问题的。并且问题和动态脚本加载时一样的。
function loadStyle（css）{
  var style=document.createElement("style");
  style.type="text/css";
  try{
    style.appendChiild(document.createTextNode(css));
  }catch(ex){
    style.styleSheet.cssText=css;
  }
  var head = document.getElementsByTagName("head")[0];
  head.appendChild(style);
}
******************************************
操作表格
var table = document.createElement("table");
table.border=1;
table.width="100%";
var tbody = document.createElement("tbody");
table.appendChild(tbody);

tbody.insertRow(0);
tbody.rows[0].insertCell(0);
tbody.rows[0].cells[0].appendChild(document.createTextNode("dd"))

document.body.appendChild(table);
HTMLDOM 属性和方法介绍
属性或方法 说明
caption 保存着<caption>元素的引用;
tBodies 保存着<tbody>元素的HTMLCollection集合;
tFoot 保存着对<tfoot>元素的引用;
tHead 保存着对<thead>元素的引用;
rows 保存着对<tr>元素的HTMLCollection集合;
createTHead() 创建<thead>元素,并返回引用;
createTFoot() 创建<tfoot>元素,并返回引用;
createCpation() 创建<caption>元素,并返回引用;
deleteTHead() 删除<thead>元素;
deleteTFoot() 删除<tfoot>元素;
deleteCaption() 删除<caption>元素;
deleteRow(pos) 删除指定的行;
insertRow(pos) 向rows集合中的指定位置插入一行;

<tbody>元素添加的属性和方法
rows 保存着<tbody>元素中行的HTMLCollection;
deleteRow(pos) 删除指定位置的行;
insertRow(pos) 向rows集合中的指定位置插入一行;

<tr>元素添加的属性和方法
cells 保存着<tr>元素中单元格的HTMLCollectioin集合;
deleteCell(pos) 删除指定位置的单元格;
insertCell(pos) 向cells集合的指定位置插入一个单元格,并返回引用;

// HTMLDOM获取表格的<caption>
alert(table.caption.innerHTML); // 获取caption的内容;

// PS:在一个表格中<thead>和<tfoot>是唯一的,只能有一个;
// 而<tbody>不是唯一的,可以是多个,这样导致最后返回的<thead>和<tfoot>是元素引用;而<tbody>是元素集合;

*************************************************
DOM扩展
（1）选择符API 
    LEVEL 1：querySelector();
             querySlectorAll(); 返回的是一个NodeList集合的实例。
    LEVEL2：matchesSelector();查看一个元素与该选择器是否匹配。但是浏览器对这个方法的兼容不是很理想，在使用的时候需要加上
            浏览器厂商前缀。（ms o webkit moz）
（2）元素遍历
  childElementCount;
  firstElementChild;
  lastElementChild;
  perivousElementChild;
  nextElementChild;
  （3）HTML5
      getElementsByClassName()IE9+支持；返回一个NodeList集合；
      classList属性：add()
                     contains()
                     remove()
                     taggle()
                    浏览器支持情况不好， FF3.6+，chrome
      焦点管理：activeElement：这个属性始于会引用当前获得了焦点的元素。
              例如：
              var button =document.getELementById("button");
              button.focus();
              console.log(document.activeElement===button);
              默认情况下  文档加载完成时 ，document.activeElement保存的是document.body元素的引用。文档加载的时候是null（IE4+）
      HTML的变化： (1)readState属性：loading（正在加载文档）
                                     complete（已近加载完文档）
      
                   (2)兼容模式：IE给document添加一个名为compatMode。告诉浏览器采用哪种渲染模式。
                                在标准模式下document.compatMode==="CSS1Compat"
                                在混杂模式中document.compatMode==="BackCompat"
                   (3)head属性：document.head
                   (4)字符集属性：document.charset(FF不支持) document.Characterset(只有FF支持) document.defaultCharset(IE Safari Chrome)
      自定义属性：目的是为元素提供与渲染无关的信息，或者提供语义信息（data-前缀，FF6+,Chrome支持）
      插入标记：innerHTML属性
                outerHTML属性
                insertAdjacentHTML()--beforebegin,afterbegin,beforeend,afterend
      scrollIntoView()方法：参数为true或者不传入参数，那么窗口会让调用元素与视口尽可能齐平，
                            参数设置为false，那么窗口中尽可能的把调用元素的全部显示在窗口中。
    
    
    （4）文档模式:IE8引入了一个新的概念叫做“文档模式”
                 IE9四种文档渲染模式：IE5以混合模式渲染页面
                                      IE7以IE7标准模式渲染页面
                                      IE8以IE8标准模式渲染页面
                                      IE9以IE9标准模式渲染页面
                要想强制浏览器以某种模式渲染页面：设置http的头信息X-UA-Compatible
                                                  <meta http-equiv="X-UA-Compatible" content="IE=IEversion">
                                                    IEversion:5,7,8,9,EmulateIE9,EmulateIE8,EmulateIE7,edge
                <%--IE=edge告诉IE使用最新的引擎渲染网页(禁用兼容模式)，chrome=1则可以激活Chrome Frame--%>
              	<meta http-equiv="X-UA-Compatible" content ="IE=edge,chrome=1" />
              	<%--国产浏览器使用极速模式(Chromium内核)--%>
              	<meta name="renderer" content="webkit" />
              	<meta http-equiv="pragma" content="no-cache" />
              	<meta http-equiv="cache-control" content="no-cache" />
              	<meta http-equiv="expires" content="0" />
              	<%--如果jsp页面有pageEncoding="UTF-8"的设置,该meta可以省略--%>
              	<meta http-equiv="content-type" content="text/html;charset=utf-8" />
              	
    
      




















































